{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#logseq-doctor","title":"Logseq Doctor","text":"<p>Logseq Doctor: heal your flat old Markdown files before importing them to Logseq.</p> <p>Project Status</p> <p>This project is still in alpha, so it's very rough on the edges (documentation and feature-wise).</p> Text Only<pre><code>At the moment, it has both a Python and Go CLI.\n\nThe long-term plan is to convert it to Go and slowly remove Python.\nNew features will be added to the Go CLI only.\n</code></pre>"},{"location":"#what-is-logseq-doctor","title":"What is Logseq Doctor?","text":"<p>Logseq Doctor is a command-line tool that helps you prepare your Markdown files for import into Logseq. It provides utilities to:</p> <ul> <li>Convert flat Markdown to Logseq's outline format</li> <li>Clean up and tidy Markdown files</li> <li>Prevent invalid content</li> <li>Manage tasks in Logseq</li> <li>Append content to your Logseq graph</li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#python-cli-lsdpy","title":"Python CLI (<code>lsdpy</code>)","text":"<ul> <li>Outline Conversion: Convert flat Markdown files to Logseq's outline format</li> <li>Task Management: List and manage tasks in your Logseq graph</li> </ul>"},{"location":"#go-cli-lsd","title":"Go CLI (<code>lsd</code>)","text":"<ul> <li>Content Management: Append raw Markdown content to Logseq</li> <li>Tidy Up: Clean up and standardize your Markdown files</li> <li>Fast Performance: Written in Go for speed and efficiency</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide - Get started with Logseq Doctor</li> <li>Usage Guide - Learn how to use the CLI tools</li> <li>Contributing - Help improve Logseq Doctor</li> <li>GitHub Repository</li> </ul>"},{"location":"#project-goals","title":"Project Goals","text":"<p>The primary goal of Logseq Doctor is to make it easier to migrate existing Markdown content into Logseq. Whether you're coming from another note-taking system or have a collection of flat Markdown files, Logseq Doctor helps ensure your content is properly formatted for Logseq's outliner-based structure.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#050-2025-02-13","title":"0.5.0 (2025-02-13)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>tasks: JSON format (#121) (07da841)</li> </ul>"},{"location":"changelog/#040-2025-02-11","title":"0.4.0 (2025-02-11)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>deps: update github.com/andreoliwa/logseq-go digest to 276dc3d (62aa9ec)</li> <li>deps: update github.com/andreoliwa/logseq-go digest to 3b9f58b (13e6274)</li> <li>deps: update module github.com/stretchr/testify to v1.10.0 (f737ea4)</li> <li>deps: update module gotest.tools/v3 to v3.5.2 (7ee8efc)</li> <li>deps: update rust crate anyhow to 1.0.80 (3938baa)</li> <li>deps: update rust crate anyhow to 1.0.81 (d5e9425)</li> <li>deps: update rust crate anyhow to v1.0.95 (a0bdcf7)</li> <li>deps: update rust crate assert_fs to v1.1.2 (b55d654)</li> <li>deps: update rust crate chrono to 0.4.34 (8903b29)</li> <li>deps: update rust crate chrono to 0.4.35 (4001ea5)</li> <li>deps: update rust crate chrono to 0.4.37 (8ff6a0b)</li> <li>deps: update rust crate pyo3 to 0.20.3 (c0a566a)</li> <li>deps: update rust crate pyo3 to 0.21.0 (5a75518)</li> <li>deps: update rust crate pyo3 to 0.21.1 (4f9b6b5)</li> <li>deps: update rust crate regex to 1.10.4 (fc033da)</li> <li>deps: update rust crate regex to v1.11.1 (61ed776)</li> <li>don't remove double spaces in tables (253a1d0)</li> <li>make Journal properties public (78b18a2)</li> <li>one transaction per file, to avoid touching unmodified files (b66410b)</li> <li>tasks: use \u00a7 as column separator, to parse with fzf (ccd12e7)</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>append raw Markdown from sdtin to a journal (545b17b)</li> <li>check for running tasks (0bfef8f)</li> <li>check references to forbidden pages (58f9f26)</li> <li>Python calling a Go executable with a simple function (902e54d)</li> <li>tidy-up command accepting Markdown files (0f2e549)</li> <li>tidy-up: check consecutive spaces in Go (#115) (32a02d8)</li> <li>tidy-up: remove double spaces and save Markdown file (212014a)</li> <li>tidy-up: remove empty bullets in Go, remove Python command (a472b30)</li> <li>tidy-up: remove unnecessary brackets from tags (d887e58)</li> <li>tidy-up: remove unnecessary brackets from tags in Go (f01fffd)</li> </ul>"},{"location":"changelog/#v030-2024-02-07","title":"v0.3.0 (2024-02-07)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>journal: option to prepend content</li> <li>journal: choose the date (with natural language)</li> <li>journal: output content to stdout</li> <li>journal: option to convert to outline (#17)</li> <li>journal: pipe content from stdin (#17)</li> <li>journal: append content to the current journal page (#17)</li> </ul>"},{"location":"changelog/#v021-2024-02-04","title":"v0.2.1 (2024-02-04)","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>automated release with \"make release\" from local computer</li> </ul>"},{"location":"changelog/#v020-2024-02-04","title":"v0.2.0 (2024-02-04)","text":""},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>\"logseq\" crate for reusable functions</li> <li>remove double spaces</li> <li>remove Python 3.7</li> <li>list tasks, add Kanban board (#78)</li> <li>tidy up files by removing empty bullets (#63)</li> <li>rich CLI with Typer</li> </ul>"},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>remove Python 3.8 support</li> <li>preserve line break at the end</li> <li>deps: update dependency mistletoe to v1.3.0</li> <li>remove --format kanban</li> <li>deps: update dependency mistletoe to v1.2.1</li> <li>deps: update dependency mistletoe to v1.2.0</li> <li>deps: update dependency click to v8.1.7</li> <li>Typer needs some imports, UP006 ignores target-version=py38</li> <li>don't print \"Done\" on success</li> <li>deps: update dependency click to v8.1.6</li> <li>deps: update dependency click to v8.1.5</li> <li>deps: update dependency click to v8.1.4</li> <li>deps: update dependency mistletoe to v1.1.0</li> <li>deps: update dependency requests to v2.31.0</li> <li>deps: update dependency requests to v2.30.0</li> <li>deps: update dependency typer to v0.9.0</li> <li>deps: update dependency typer to v0.8.0</li> <li>add Ruff and adjust code</li> <li>deps: update dependency mistletoe to v1</li> <li>deps: upgrade shelligham and pre-commit hooks, fix tox</li> <li>tidy-up: display file name that was fixed</li> <li>handle thematic breaks and setext headers</li> <li>handle nested lists with single or multiple levels (#47)</li> </ul>"},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>rename Python module</li> </ul>"},{"location":"changelog/#v011-2022-08-21","title":"v0.1.1 (2022-08-21)","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>ImportError on lsd --help</li> </ul>"},{"location":"changelog/#v010-2022-03-26","title":"v0.1.0 (2022-03-26)","text":""},{"location":"changelog/#feat_2","title":"Feat","text":"<ul> <li>convert headers and flat paragraphs to an outline</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>When reporting a bug, please include:</p> <ul> <li>Your operating system name and version</li> <li>Any details about your local setup that might be helpful in troubleshooting</li> <li>Detailed steps to reproduce the bug</li> </ul>"},{"location":"contributing/#documentation-improvements","title":"Documentation Improvements","text":"<p>Logseq Doctor could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#feature-requests-and-feedback","title":"Feature Requests and Feedback","text":"<p>The best way to send feedback is to file an issue.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work</li> <li>Keep the scope as narrow as possible, to make it easier to implement</li> <li>Remember that this is a volunteer-driven project, and that code contributions are welcome :)</li> </ul>"},{"location":"contributing/#development","title":"Development","text":"<p>To set up <code>logseq-doctor</code> for local development:</p> <ol> <li> <p>Fork logseq-doctor (look for the \"Fork\" button)</p> </li> <li> <p>Clone your fork locally:</p> </li> </ol> Bash<pre><code>git clone git@github.com:YOURGITHUBNAME/logseq-doctor.git\ncd logseq-doctor\n</code></pre> <ol> <li>Set up your local development environment:</li> </ol> Bash<pre><code>make setup\n</code></pre> <p>This will:    - Create a Python virtual environment    - Install Python dependencies    - Set up Go dependencies    - Install development tools</p> <ol> <li>Create a branch for local development:</li> </ol> Bash<pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li>When you're done making changes, run all the checks:</li> </ol> <p>For Python changes:</p> Bash<pre><code>tox\n</code></pre> <p>For Go changes:</p> Bash<pre><code>make test-go\nmake lint-go\n</code></pre> <p>Run all tests:</p> Bash<pre><code>make test\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> Bash<pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>If you need some code review or feedback while you're developing the code, just make the pull request.</p> <p>For merging, you should:</p> <ol> <li>Include passing tests (run <code>tox</code> for Python, <code>make test-go</code> for Go)</li> <li>Update documentation when there's new API, functionality, etc.</li> <li>Add a note to the changelog about the changes</li> </ol>"},{"location":"contributing/#development-tips","title":"Development Tips","text":""},{"location":"contributing/#running-a-subset-of-tests","title":"Running a Subset of Tests","text":"<p>Python:</p> Bash<pre><code>tox -e envname -- pytest -k test_myfeature\n</code></pre> <p>Go:</p> Bash<pre><code>go test -v -run TestMyFeature ./...\n</code></pre>"},{"location":"contributing/#running-tests-in-parallel","title":"Running Tests in Parallel","text":"<p>Python:</p> Bash<pre><code>tox -p auto\n</code></pre> <p>Go:</p> Bash<pre><code>go test -v -parallel 4 ./...\n</code></pre>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>Python:</p> <ul> <li>We use <code>black</code> for code formatting</li> <li>We use <code>ruff</code> for linting</li> <li>Run <code>tox -e check</code> to check code style</li> </ul> <p>Go:</p> <ul> <li>We use <code>gofmt</code> for code formatting</li> <li>We use <code>golangci-lint</code> for linting</li> <li>Run <code>make lint-go</code> to check code style</li> </ul>"},{"location":"contributing/#building-documentation-locally","title":"Building Documentation Locally","text":"<p>To build and preview the documentation locally:</p> Bash<pre><code># Install MkDocs and dependencies\npip install -r docs/requirements.txt\n\n# Serve the documentation locally\nmkdocs serve\n</code></pre> <p>Then open http://127.0.0.1:8000 in your browser.</p>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"Text Only<pre><code>logseq-doctor/\n\u251c\u2500\u2500 cmd/              # Go CLI commands\n\u251c\u2500\u2500 internal/         # Go internal packages\n\u251c\u2500\u2500 pkg/              # Go public packages\n\u251c\u2500\u2500 src/              # Python source code\n\u251c\u2500\u2500 tests/            # Python tests\n\u251c\u2500\u2500 docs/             # Documentation (MkDocs)\n\u251c\u2500\u2500 main.go           # Go main entry point\n\u2514\u2500\u2500 pyproject.toml    # Python project configuration\n</code></pre>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>Feel free to open an issue if you have any questions about contributing!</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>Logseq Doctor provides both Python and Go implementations. You can install either or both depending on your needs.</p>"},{"location":"installation/#python-executable","title":"Python Executable","text":"<p>The recommended way is to install <code>logseq-doctor</code> globally with pipx:</p> Bash<pre><code>pipx install logseq-doctor\n</code></pre> <p>You can also install the development version with:</p> Bash<pre><code>pipx install git+https://github.com/andreoliwa/logseq-doctor\n</code></pre> <p>You will then have the <code>lsdpy</code> command available globally in your system.</p>"},{"location":"installation/#alternative-pip","title":"Alternative: pip","text":"<p>If you prefer to use pip:</p> Bash<pre><code>pip install logseq-doctor\n</code></pre> <p>Warning</p> <p>Installing with pip may conflict with other Python packages in your system. We recommend using pipx instead.</p>"},{"location":"installation/#go-binary-executable","title":"Go Binary Executable","text":""},{"location":"installation/#macos-and-linux-homebrew","title":"macOS and Linux (Homebrew)","text":"<p>The recommended way for macOS and Linux is to install with Homebrew:</p> Bash<pre><code>brew install andreoliwa/formulae/logseq-doctor\n</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>You can install manually using Go:</p> Bash<pre><code>go install github.com/andreoliwa/logseq-doctor@latest\n</code></pre> <p>Confirm if it's in your path:</p> Bash<pre><code>which lsd\n# or\nls -l $(go env GOPATH)/bin/lsd\n</code></pre> <p>Tip</p> <p>Make sure your <code>GOPATH/bin</code> directory is in your system's PATH. You can add it to your shell profile:</p> Text Only<pre><code>```bash\nexport PATH=\"$PATH:$(go env GOPATH)/bin\"\n```\n</code></pre>"},{"location":"installation/#build-from-source","title":"Build from Source","text":"<p>To build and install from the source (both Python and Go executables), clone the repository and run:</p> Bash<pre><code>git clone https://github.com/andreoliwa/logseq-doctor.git\ncd logseq-doctor\nmake install\n</code></pre> <p>This will:</p> <ol> <li>Set up a Python virtual environment</li> <li>Install Python dependencies</li> <li>Build the Go binary</li> <li>Install both executables</li> </ol>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":""},{"location":"installation/#python-cli","title":"Python CLI","text":"Bash<pre><code>lsdpy --help\n</code></pre> <p>You should see the help message with available commands.</p>"},{"location":"installation/#go-cli","title":"Go CLI","text":"Bash<pre><code>lsd --help\n</code></pre> <p>You should see the help message with available commands.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Once installed, check out the Usage Guide to learn how to use Logseq Doctor.</p>"},{"location":"readme/","title":"README","text":""},{"location":"readme/#overview","title":"Overview","text":"docs tests package <p>Logseq Doctor: heal your flat old Markdown files before importing them.</p> <p>\ud83d\udcda Read the full documentation</p> <p>[!NOTE] This project is still alpha, so it\\'s very rough on the edges (documentation and feature-wise).</p> <p>At the moment, it has both a Python and Go CLI.</p> <p>The long-term plan is to convert it to Go and slowly remove Python. New features will be added to the Go CLI only.</p>"},{"location":"readme/#installation","title":"Installation","text":""},{"location":"readme/#python-executable","title":"Python executable","text":"<p>The recommended way is to install <code>logseq-doctor</code> globally with pipx:</p> Text Only<pre><code>pipx install logseq-doctor\n</code></pre> <p>You can also install the development version with:</p> Text Only<pre><code>pipx install git+https://github.com/andreoliwa/logseq-doctor\n</code></pre> <p>You will then have the <code>lsdpy</code> command available globally in your system.</p>"},{"location":"readme/#go-binary-executable","title":"Go binary executable","text":"<p>The recommended way for macOS and Linux is to install with Homebrew:</p> Text Only<pre><code>brew install andreoliwa/formulae/logseq-doctor\n</code></pre> <p>Or you can install manually:</p> Text Only<pre><code>go install github.com/andreoliwa/logseq-doctor@latest\n</code></pre> <p>Confirm if it\\'s in your path:</p> Text Only<pre><code>which lsd\n# or\nls -l $(go env GOPATH)/bin/lsd\n</code></pre>"},{"location":"readme/#build-from-source","title":"Build from source","text":"<p>To build and install from the source (both Python and Go executables), clone the repository and run:</p> Text Only<pre><code>make install\n</code></pre>"},{"location":"readme/#quick-start","title":"Quick start","text":"<p>Type <code>lsdpy</code> without arguments to check the current commands and options:</p> Text Only<pre><code>Usage: lsdpy [OPTIONS] COMMAND [ARGS]...\n\nLogseq Doctor: heal your flat old Markdown files before importing them.\n\nOptions:\n-g, --graph DIRECTORY           Logseq graph  [env var: LOGSEQ_GRAPH_PATH;\nrequired]\n--install-completion [bash|zsh|fish|powershell|pwsh]\nInstall completion for the specified shell.\n--show-completion [bash|zsh|fish|powershell|pwsh]\nShow completion for the specified shell, to\ncopy it or customize the installation.\n--help                          Show this message and exit.\n\nCommands:\noutline  Convert flat Markdown to outline.\ntasks    List tasks in Logseq.\n</code></pre> <p>Type <code>lsd</code> (the Go executable) without arguments to check the current commands and options:</p> Text Only<pre><code>Logseq Doctor (Go) heals your Markdown files for Logseq.\n\nConvert flat Markdown to Logseq outline, clean up Markdown,\nprevent invalid content, and more stuff to come.\n\n\"lsdpy\"\" is the CLI tool originally written in Python; \"lsd\"\" is the Go version.\nThe intention is to slowly convert everything to Go.\n\nUsage:\nlsd [command]\n\nAvailable Commands:\ncompletion  Generate the autocompletion script for the specified shell\ncontent     Append raw Markdown content to Logseq\nhelp        Help about any command\ntidy-up     Tidy up your Markdown files.\n\nFlags:\n-h, --help   help for lsd\n\nUse \"lsd [command] --help\" for more information about a command.\n</code></pre>"},{"location":"readme/#development","title":"Development","text":"<p>To set up local development:</p> Text Only<pre><code>make setup\n</code></pre> <p>Run this to see help on all available targets:</p> Text Only<pre><code>make\n</code></pre> <p>To run all the tests run:</p> Text Only<pre><code>tox\n</code></pre> <p>Note, to combine the coverage data from all the tox environments run:</p> OS Windows set PYTEST_ADDOPTS=--cov-append tox Other PYTEST_ADDOPTS=--cov-append tox"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>Logseq Doctor provides two CLI tools: <code>lsdpy</code> (Python) and <code>lsd</code> (Go). This guide covers both.</p> <p>Info</p> <p>The Go CLI (<code>lsd</code>) is the recommended version for new features. The Python CLI (<code>lsdpy</code>) is maintained for backward compatibility but new features will only be added to the Go version.</p>"},{"location":"usage/#python-cli-lsdpy","title":"Python CLI (<code>lsdpy</code>)","text":""},{"location":"usage/#overview","title":"Overview","text":"<p>Type <code>lsdpy</code> without arguments to check the current commands and options:</p> Bash<pre><code>lsdpy --help\n</code></pre> <p>Output:</p> Text Only<pre><code>Usage: lsdpy [OPTIONS] COMMAND [ARGS]...\n\nLogseq Doctor: heal your flat old Markdown files before importing them.\n\nOptions:\n  -g, --graph DIRECTORY           Logseq graph  [env var: LOGSEQ_GRAPH_PATH; required]\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n\nCommands:\n  outline  Convert flat Markdown to outline.\n  tasks    List tasks in Logseq.\n</code></pre>"},{"location":"usage/#setting-the-logseq-graph-path","title":"Setting the Logseq Graph Path","text":"<p>Most commands require you to specify your Logseq graph directory. You can do this in two ways:</p> <ol> <li>Using the <code>-g</code> flag:</li> </ol> Bash<pre><code>lsdpy -g /path/to/your/logseq/graph outline input.md\n</code></pre> <ol> <li>Using the environment variable:</li> </ol> Bash<pre><code>export LOGSEQ_GRAPH_PATH=/path/to/your/logseq/graph\nlsdpy outline input.md\n</code></pre>"},{"location":"usage/#commands","title":"Commands","text":""},{"location":"usage/#outline-convert-flat-markdown-to-outline","title":"<code>outline</code> - Convert Flat Markdown to Outline","text":"<p>Convert flat Markdown files to Logseq's outline format:</p> Bash<pre><code>lsdpy -g /path/to/graph outline input.md\n</code></pre> <p>This command reads a flat Markdown file and converts it to Logseq's indented outline structure.</p>"},{"location":"usage/#tasks-list-tasks-in-logseq","title":"<code>tasks</code> - List Tasks in Logseq","text":"<p>List all tasks in your Logseq graph:</p> Bash<pre><code>lsdpy -g /path/to/graph tasks\n</code></pre> <p>This will display all tasks found in your Logseq pages.</p>"},{"location":"usage/#go-cli-lsd","title":"Go CLI (<code>lsd</code>)","text":""},{"location":"usage/#overview_1","title":"Overview","text":"<p>Type <code>lsd</code> without arguments to check the current commands and options:</p> Bash<pre><code>lsd --help\n</code></pre> <p>Output:</p> Text Only<pre><code>Logseq Doctor (Go) heals your Markdown files for Logseq.\n\nConvert flat Markdown to Logseq outline, clean up Markdown,\nprevent invalid content, and more stuff to come.\n\n\"lsdpy\" is the CLI tool originally written in Python; \"lsd\" is the Go version.\nThe intention is to slowly convert everything to Go.\n\nUsage:\n  lsd [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  content     Append raw Markdown content to Logseq\n  help        Help about any command\n  tidy-up     Tidy up your Markdown files.\n\nFlags:\n  -h, --help   help for lsd\n\nUse \"lsd [command] --help\" for more information about a command.\n</code></pre>"},{"location":"usage/#commands_1","title":"Commands","text":""},{"location":"usage/#content-append-raw-markdown-content","title":"<code>content</code> - Append Raw Markdown Content","text":"<p>Append raw Markdown content to your Logseq graph:</p> Bash<pre><code>lsd content --help\n</code></pre> <p>This command allows you to add content to your Logseq pages programmatically.</p>"},{"location":"usage/#tidy-up-tidy-up-markdown-files","title":"<code>tidy-up</code> - Tidy Up Markdown Files","text":"<p>Clean up and standardize your Markdown files:</p> Bash<pre><code>lsd tidy-up --help\n</code></pre> <p>This command helps ensure your Markdown files follow consistent formatting rules.</p>"},{"location":"usage/#completion-shell-completion","title":"<code>completion</code> - Shell Completion","text":"<p>Generate autocompletion scripts for your shell:</p> Bash<pre><code># For bash\nlsd completion bash &gt; /etc/bash_completion.d/lsd\n\n# For zsh\nlsd completion zsh &gt; \"${fpath[1]}/_lsd\"\n\n# For fish\nlsd completion fish &gt; ~/.config/fish/completions/lsd.fish\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#converting-a-flat-markdown-file","title":"Converting a Flat Markdown File","text":"<p>If you have a flat Markdown file like this:</p> Markdown<pre><code># My Notes\n\nSome content here.\n\n## Section 1\n\nMore content.\n\n### Subsection\n\nDetails.\n</code></pre> <p>You can convert it to Logseq's outline format:</p> Bash<pre><code>lsdpy -g /path/to/graph outline my-notes.md\n</code></pre>"},{"location":"usage/#tidying-up-markdown-files","title":"Tidying Up Markdown Files","text":"<p>To clean up and standardize your Markdown files:</p> Bash<pre><code>lsd tidy-up /path/to/your/markdown/files\n</code></pre>"},{"location":"usage/#tips","title":"Tips","text":"<p>Environment Variables</p> <p>Set <code>LOGSEQ_GRAPH_PATH</code> in your shell profile to avoid typing it every time:</p> Text Only<pre><code>```bash\n# Add to ~/.bashrc, ~/.zshrc, etc.\nexport LOGSEQ_GRAPH_PATH=/path/to/your/logseq/graph\n```\n</code></pre> <p>Shell Completion</p> <p>Enable shell completion for a better CLI experience. See the <code>completion</code> command above.</p>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#command-not-found","title":"Command Not Found","text":"<p>If you get a \"command not found\" error:</p> <ol> <li>Make sure the tool is installed (see Installation)</li> <li>Check that the installation directory is in your PATH</li> <li>Try running with the full path to the executable</li> </ol>"},{"location":"usage/#permission-denied","title":"Permission Denied","text":"<p>If you get a \"permission denied\" error:</p> <ol> <li>Make sure the executable has execute permissions: <code>chmod +x /path/to/lsd</code></li> <li>Check that you have write permissions to your Logseq graph directory</li> </ol>"},{"location":"usage/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the CLI Reference for detailed command documentation</li> <li>Check out Contributing if you want to help improve Logseq Doctor</li> </ul>"},{"location":"reference/cli/","title":"CLI Commands","text":""},{"location":"reference/cli/#cli-reference","title":"CLI Reference","text":"<p>This page provides detailed reference documentation for all CLI commands in Logseq Doctor.</p>"},{"location":"reference/cli/#python-cli-lsdpy","title":"Python CLI (<code>lsdpy</code>)","text":""},{"location":"reference/cli/#global-options","title":"Global Options","text":"Text Only<pre><code>-g, --graph DIRECTORY\n</code></pre> <p>Path to your Logseq graph directory. Can also be set via the <code>LOGSEQ_GRAPH_PATH</code> environment variable.</p> <p>Required: Yes (for most commands)</p>"},{"location":"reference/cli/#commands","title":"Commands","text":""},{"location":"reference/cli/#outline","title":"<code>outline</code>","text":"<p>Convert flat Markdown files to Logseq's outline format.</p> <p>Usage:</p> Bash<pre><code>lsdpy -g /path/to/graph outline [OPTIONS] INPUT_FILE\n</code></pre> <p>Arguments:</p> <ul> <li><code>INPUT_FILE</code>: Path to the Markdown file to convert</li> </ul> <p>Description:</p> <p>This command reads a flat Markdown file and converts it to Logseq's indented outline structure. It processes headings and content to create a hierarchical outline that works well with Logseq's outliner interface.</p> <p>Example:</p> Bash<pre><code>lsdpy -g ~/logseq/my-graph outline notes.md\n</code></pre>"},{"location":"reference/cli/#tasks","title":"<code>tasks</code>","text":"<p>List all tasks in your Logseq graph.</p> <p>Usage:</p> Bash<pre><code>lsdpy -g /path/to/graph tasks [OPTIONS]\n</code></pre> <p>Description:</p> <p>This command scans your Logseq graph and lists all tasks found in your pages. It helps you get an overview of your TODO items across all your notes.</p> <p>Example:</p> Bash<pre><code>lsdpy -g ~/logseq/my-graph tasks\n</code></pre>"},{"location":"reference/cli/#shell-completion","title":"Shell Completion","text":"<p>Install shell completion for easier command-line usage:</p> <p>Bash:</p> Bash<pre><code>lsdpy --install-completion bash\n</code></pre> <p>Zsh:</p> Bash<pre><code>lsdpy --install-completion zsh\n</code></pre> <p>Fish:</p> Bash<pre><code>lsdpy --install-completion fish\n</code></pre> <p>PowerShell:</p> Bash<pre><code>lsdpy --install-completion powershell\n</code></pre>"},{"location":"reference/cli/#go-cli-lsd","title":"Go CLI (<code>lsd</code>)","text":""},{"location":"reference/cli/#global-flags","title":"Global Flags","text":"Text Only<pre><code>-h, --help\n</code></pre> <p>Show help information for any command.</p>"},{"location":"reference/cli/#commands_1","title":"Commands","text":""},{"location":"reference/cli/#content","title":"<code>content</code>","text":"<p>Append raw Markdown content to your Logseq graph.</p> <p>Usage:</p> Bash<pre><code>lsd content [OPTIONS]\n</code></pre> <p>Description:</p> <p>This command allows you to programmatically add content to your Logseq pages. It's useful for automation and scripting workflows where you want to append content to your knowledge base.</p> <p>Example:</p> Bash<pre><code>echo \"- New note\" | lsd content\n</code></pre> <p>Get detailed help:</p> Bash<pre><code>lsd content --help\n</code></pre>"},{"location":"reference/cli/#tidy-up","title":"<code>tidy-up</code>","text":"<p>Clean up and standardize your Markdown files.</p> <p>Usage:</p> Bash<pre><code>lsd tidy-up [OPTIONS] [FILES...]\n</code></pre> <p>Description:</p> <p>This command helps ensure your Markdown files follow consistent formatting rules. It performs various cleanup operations:</p> <ul> <li>Removes double spaces (except in tables)</li> <li>Removes empty bullets</li> <li>Removes unnecessary brackets from tags</li> <li>Standardizes formatting</li> </ul> <p>Example:</p> Bash<pre><code>lsd tidy-up /path/to/markdown/files/*.md\n</code></pre> <p>Get detailed help:</p> Bash<pre><code>lsd tidy-up --help\n</code></pre>"},{"location":"reference/cli/#completion","title":"<code>completion</code>","text":"<p>Generate shell completion scripts.</p> <p>Usage:</p> Bash<pre><code>lsd completion [bash|zsh|fish|powershell]\n</code></pre> <p>Description:</p> <p>Generate autocompletion scripts for your shell. This enables tab completion for commands and options.</p> <p>Examples:</p> <p>Bash:</p> Bash<pre><code>lsd completion bash &gt; /etc/bash_completion.d/lsd\n</code></pre> <p>Zsh:</p> Bash<pre><code>lsd completion zsh &gt; \"${fpath[1]}/_lsd\"\n</code></pre> <p>Fish:</p> Bash<pre><code>lsd completion fish &gt; ~/.config/fish/completions/lsd.fish\n</code></pre> <p>PowerShell:</p> Bash<pre><code>lsd completion powershell &gt; lsd.ps1\n</code></pre>"},{"location":"reference/cli/#help","title":"<code>help</code>","text":"<p>Get help about any command.</p> <p>Usage:</p> Bash<pre><code>lsd help [COMMAND]\n</code></pre> <p>Example:</p> Bash<pre><code>lsd help tidy-up\n</code></pre>"},{"location":"reference/cli/#environment-variables","title":"Environment Variables","text":""},{"location":"reference/cli/#logseq_graph_path","title":"<code>LOGSEQ_GRAPH_PATH</code>","text":"<p>Path to your Logseq graph directory. Used by the Python CLI (<code>lsdpy</code>) as the default value for the <code>-g</code> flag.</p> <p>Example:</p> Bash<pre><code>export LOGSEQ_GRAPH_PATH=~/logseq/my-graph\nlsdpy tasks  # No need to specify -g flag\n</code></pre>"},{"location":"reference/cli/#exit-codes","title":"Exit Codes","text":"<p>Both CLIs use standard exit codes:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: General error</li> <li><code>2</code>: Command-line usage error</li> </ul>"},{"location":"reference/cli/#tips","title":"Tips","text":"<p>Combining Commands</p> <p>You can combine multiple commands using shell pipes and scripting:</p> Text Only<pre><code>```bash\n# Example: Tidy up all Markdown files in a directory\nfind ~/notes -name \"*.md\" -exec lsd tidy-up {} \\;\n```\n</code></pre> <p>Automation</p> <p>Use the Go CLI (<code>lsd</code>) in scripts and automation workflows for better performance:</p> Text Only<pre><code>```bash\n#!/bin/bash\n# Daily note automation\necho \"- $(date): Daily standup notes\" | lsd content\n```\n</code></pre> <p>Shell Aliases</p> <p>Create shell aliases for frequently used commands:</p> Text Only<pre><code>```bash\n# Add to ~/.bashrc or ~/.zshrc\nalias lsd-tasks='lsdpy -g ~/logseq/my-graph tasks'\nalias lsd-tidy='lsd tidy-up'\n```\n</code></pre>"}]}