[tool.black]
line-length = 120
target-version = ['py37']

[tool.poetry]
name = "logseq-doctor"
version = "0.1.1"
description = "Logseq Doctor: heal your Markdown files"
authors = ["W. Augusto Andreoli <andreoliwa@gmail.com>"]
license = "MIT"
readme = "README.rst"
repository = "https://github.com/andreoliwa/logseq-doctor"
keywords = [
    "python", "markdown", "python3", "knowledge-graph", "knowledge-base", "markdown-format", "markdown-formatter",
    "logseq", "markdown-formatting", "logseq-plugin"
]

# Complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: MacOS",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Documentation",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering",
    "Topic :: Text Processing :: Markup :: Markdown",
]

[tool.poetry.urls]
"Documentation" = "https://logseq-doctor.readthedocs.io/"
"Changelog" = "https://logseq-doctor.readthedocs.io/en/latest/changelog.html"
"Issue Tracker" = "https://github.com/andreoliwa/logseq-doctor/issues"

[tool.poetry.scripts]
lsd = "logseq_doctor.cli:app"

[tool.poetry.dependencies]
python = "^3.7"
click = "*"
mistletoe = "*"
requests = "*"
typer = {extras = ["all"], version = "*"}

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-datadir = "*"
responses = "*"
pytest-env = "*"
pytest-watch = "*"
pytest-testmon = "*"

[tool.ruff]
# https://beta.ruff.rs/docs/settings/#select
select = ["ALL"]

# https://beta.ruff.rs/docs/settings/#show-fixes
show-fixes = true

# https://beta.ruff.rs/docs/settings/#ignore
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "D107", # Missing docstring in `__init__`
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line of docstring should be in imperative mood
    "E402", # Module level import not at top of file
    "E501", # Line too long
    "ERA", # https://beta.ruff.rs/docs/rules/#eradicate-era
    "FBT", # https://beta.ruff.rs/docs/rules/#flake8-boolean-trap-fbt
]

# https://beta.ruff.rs/docs/settings/#line-length
line-length = 120

# https://beta.ruff.rs/docs/settings/#target-version
target-version = "py37"

# https://beta.ruff.rs/docs/settings/#src
src = ["src"]

# https://beta.ruff.rs/docs/rules/#flake8-quotes-q
[tool.ruff.flake8-quotes]
inline-quotes = "double"

# https://beta.ruff.rs/docs/rules/#mccabe-c90
[tool.ruff.mccabe]
# https://beta.ruff.rs/docs/settings/#max-complexity
max-complexity = 10

# https://beta.ruff.rs/docs/settings/#per-file-ignores
[tool.ruff.per-file-ignores]
# A001 Variable is shadowing a python builtin
# ANN https://beta.ruff.rs/docs/rules/#flake8-annotations-ann
# B008 Do not perform function call in argument defaults
# D100 Missing docstring in public module
# D103 Missing docstring in public function
# F401 imported but unused
# INP001 File `xxx.py` is part of an implicit namespace package. Add an `__init__.py`.
# PLR0913 Too many arguments to function call
# S101 use of assert detected
# S105 Possible hardcoded password
# T201 `print` found
# T203 `pprint` found
# TCH003 Move standard library import into a type-checking block
"ci/bootstrap.py" = ["ALL"]
"docs/**" = ["ANN", "INP001", "T201", "T203"]
"docs/conf.py" = ["A001"]
"src/logseq_doctor/cli.py" = ["B008", "PLR0913"]
"tests/**" = ["PLR0913", "S101", "S105", "T201", "T203", "D103", "D100", "INP001", "TCH003"]
"tests/data/**" = ["INP001"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
